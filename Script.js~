//change this to initial text..
var str = null;
var clrstr = null;
var xmlhttp = null;
var timeout = 5;
printing = new Array('test');
var printSpeed = 1;
var url = 'http://localhost/rbbc526/comms.php';
var debugQueue = '';
var consoleQueue = '';

function serverComms()
{
	if (clrstr.length==0){ 
	  //nothing sent to server
	  // no action
	  return;
	}
	  //creating XML object..
	if (window.XMLHttpRequest){
	// code for IE7+, Firefox, Chrome, Opera, Safari
	  xmlhttp=new XMLHttpRequest();
	}
	else{// code for IE6, IE5
	  xmlhttp=new ActiveXObject('Microsoft.XMLHTTP');
	}
	xmlhttp.onreadystatechange=httpHandler;

	debug('------------------------------------------------------<br/>Sending asynchronous HTTP GET request to ' + url);
	debug('Parameter q has been set to ' + clrstr);
	xmlhttp.open('GET',url+'?q='+clrstr,true);
	xmlhttp.send();
}

function httpHandler(){

	  //bug
  	  if(xmlhttp.response.length < 1){
  	  	response = 'No valid response';
  	  }
  	  else {
  	  	response = xmlhttp.response;
  	  }
	// all statuses here can be printed to the debug screen.
	  debug('------------------------------------------------------<br/>Start Packet');
	  debug('http{state=' + xmlhttp.readyState + ',status=' + xmlhttp.readyState + '}');
  	  debug('http.response = ' + response);
  	  
	  if (xmlhttp.readyState==4 && xmlhttp.status==200){
	  	//this is the function which uses xmlhttp.responseText to use responses from server
	  	//change this to cute printer
	       str = xmlhttp.responseText;
       	       //more debugging
	       debug('Cute printer typing: ' + str);
	       console(str + '<br/>');
	     }
	debug('End Packet');
}

function cutePrinter(appendMode, id, scratchpad){

	//threading function
        container = document.getElementById(id);
        scratchpadContainer = document.getElementById(scratchpad);
        children = scratchpadContainer.childNodes;        
	
	if(children.length>0){
		container.appendChild(children[0]);
		//append removes stuff from previous container, so removal is not necassary
	
		func = 'cutePrinter('+appendMode+',\''+id+'\',\''+scratchpad+'\')';
		//alert(string + 'woah');	
		setTimeout(func, timeout);
	}
	else{
		//refresh at end of cycle
		//alert("refreshing "+id);
		//stop printing if printing
		printing.splice(printing.indexOf(id),1);
	}
	refresh(id);
}
//clr submit
function submit(keyPress){
	//Up key pressed. Use for history..
	if(keyPress.keyCode==38){
	
	}
	//Up key pressed. Use for history..
	if(keyPress.keyCode==38){
	
	}
	//enter key pressed
	else if(keyPress.keyCode==13){
		clrstr = document.getElementById('clr').value;
		serverComms();
		//clear clr
		document.getElementById('clr').value = '';
	}

}

function debug(dumpText){
	dump(dumpText,"debug");
}
function console(dumpText){
	dump(dumpText,"console");
}
function dump(dumpText,id){
	       div = document.getElementById(id);
	       //push at end
		document.getElementById(id + "Scratchpad").innerHTML += dumpText + "<br/>";
	       if(printing.indexOf(id)==-1){
	       		 cutePrinter(true,id,id+'Scratchpad');
	       		 if(printing.indexOf(id)==-1){
				printing.push(id);
			 } 
	       }
}

function escapeHTML(html){
//	html = html.replace(/<br\/>/gi, "\n");
	html = escape(html);
	return String(html);
}
function unescapeHTML(html){
	html = unescape(html);
//	html = html.replace(/\\n/gi,/<br\/>/);
	return String(html);
}
function focus(inp){
	inp.select();
	inp.focus();
}
function focusSet(){
	focus(document.getElementById('clr'));
}
function configure(){
	focusSet();
	clrstr = 'init';
	serverComms();	
}
function load(){
	setTimeout('configure()',500);
}
function refresh(id){
	div = document.getElementById(id);
	//div.innerHTML = unescapeHTML(div.innerHTML);
        div.scrollTop=div.scrollHeight;
}
